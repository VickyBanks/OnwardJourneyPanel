----------- For the user clicking the menu, how did they get to viewing that content? -----
/* table vb_tv_nav_new_content_flag has all their clicks/ impressions and flag to identify new content starting
   use featured home script to identify how they got to that content.
   -> keep in what rail it was from if one home
   -> need to also include things from categories pages and channels


   1. Select all visits
   2. Select the click to the menu
   3. Join to a content item click that came before - make sure same brand/series/episode ID
   4. Prevent duplication by joining only with click that came directly before.
   5. Count number of clicks where content came from each prior location
   6. Join into where the click took them.*/
DROP TABLE IF EXISTS vb_vmb_temp;
CREATE TABLE vb_vmb_temp AS
SELECT DISTINCT master_brand_name,
                master_brand_id,
                brand_title,
                brand_id,
                series_title,
                series_id,
                episode_id,
                episode_title,
                pips_genre_level_1_names
FROM prez.scv_vmb;


-- Select visits and UV on TV where the onward nav was clicked
DROP TABLE IF EXISTS vb_tv_nav_select;
CREATE TABLE vb_tv_nav_select AS
SELECT DISTINCT dt,
                unique_visitor_cookie_id,
                visit_id,
                container,
                placement,
                event_position,
                event_start_datetime,
                attribute,
                CASE
                    WHEN left(right(placement, 13), 8) SIMILAR TO '%[0-9]%'
                        THEN left(right(placement, 13), 8) -- if this contains a number then its an ep id, if not make blank
                    ELSE 'none' END AS current_ep_id,
                result            AS next_ep_id
FROM s3_audience.publisher
WHERE (attribute LIKE '%page-section-related~select%' OR attribute LIKE '%page-section-rec~select%')
  AND metadata LIKE '%iplayer::bigscreen-html%'
  AND destination = 'PS_IPLAYER'
  AND dt >= 20200115
  AND dt <= 20200129
ORDER BY unique_visitor_cookie_id, visit_id, event_position;



-- Select all the rows with a content-item click (for those visits where the content nav was clicked)
-- this is content item clicks, start/resume/next ep clicks
-- clicks from search either go direct to an episode or a TLEO page.
DROP TABLE IF EXISTS vb_tv_content_clicks;
CREATE TABLE vb_tv_content_clicks AS
SELECT DISTINCT p.dt,
                p.unique_visitor_cookie_id,
                p.visit_id,
                p.event_position,
                p.container,
                p.attribute,
                p.placement,
                p.result
FROM s3_audience.publisher p
         JOIN vb_tv_nav_select vb -- this is to bring in only those visits where the nav click happened
              ON p.dt = vb.dt AND p.unique_visitor_cookie_id = vb.unique_visitor_cookie_id AND
                 vb.visit_id = p.visit_id
WHERE (p.attribute LIKE 'content-item%' OR p.attribute LIKE 'start-watching%' OR p.attribute = 'resume' OR
       p.attribute = 'next-episode' OR p.attribute = 'search-result-episode~click')
  AND p.publisher_clicks = 1
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position;


-- Autoplay clicks but only for those who used the nav menu
DROP TABLE IF EXISTS vb_tv_autoplay_clicks;
CREATE TABLE vb_tv_autoplay_clicks AS
SELECT DISTINCT p.dt,
                p.unique_visitor_cookie_id,
                p.visit_id,
                p.event_position,
                p.container,
                p.attribute,
                p.placement,
                CASE
                    WHEN left(right(p.placement, 13), 8) SIMILAR TO '%[0-9]%'
                        THEN left(right(p.placement, 13), 8) -- if this contains a number then its an ep id, if not make blank
                    ELSE 'none' END AS current_ep_id,
                p.result            AS next_ep_id
FROM s3_audience.publisher p
         JOIN vb_tv_nav_select vb
              ON p.dt = vb.dt AND p.unique_visitor_cookie_id = vb.unique_visitor_cookie_id AND
                 vb.visit_id = p.visit_id
WHERE (p.attribute LIKE '%squeeze-auto-play%' OR p.attribute LIKE '%squeeze-play%' OR p.attribute LIKE '%end-play%' OR p.attribute LIKE '%end-auto-play%')
  AND p.publisher_clicks = 1
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position;


-- Identify deep links to content and the content they're going too.
-- When the URL contains "playback" the ep_id can be found, but if not it's very difficult/impossible.

CREATE TABLE vb_tv_deeplinks AS
SELECT dt, unique_visitor_cookie_id, visit_id, event_position,
       CASE
           WHEN SUBSTRING(REVERSE(playback_str), 10, 8) SIMILAR TO '%[0-9]%' THEN SUBSTRING(REVERSE(playback_str), 10, 8)
           ELSE NULL END AS click_result
FROM (SELECT DISTINCT a.dt, a.unique_visitor_cookie_id, a.visit_id, a.event_position,
                      CASE
                          WHEN a.url ILIKE '%/playback%' THEN REGEXP_SUBSTR(REVERSE(a.url), '[^.]*/kcabyalp') -- Need the final instance of the phrase'/playback' to get the episode ID so reverse url so that it's now first.
                          ELSE NULL END AS playback_str
      FROM s3_audience.events a
JOIN s3_audience.publisher p ON p.dt = a.dt AND p.unique_visitor_cookie_id = a.unique_visitor_cookie_id AND
                 a.visit_id = p.visit_id
      WHERE a.destination = 'PS_IPLAYER'
        AND a.app_type LIKE 'bigscreen%'
        AND a.url LIKE '%deeplink%'
        AND (a.dt BETWEEN 20200115 AND 20200129)
        AND a.url IS NOT NULL);

SELECT * FROM vb_tv_deeplinks LIMIT 15;

-- create a table with all the nav clicks and select clicks
DROP TABLE IF EXISTS vb_tv_content_nav_all;
CREATE TABLE vb_tv_content_nav_all
AS
SELECT dt,
       unique_visitor_cookie_id,
       visit_id,
       event_position,
       container,
       attribute,
       placement,
       current_ep_id,
       next_ep_id AS click_result
FROM vb_tv_nav_select;

INSERT INTO vb_tv_content_nav_all
SELECT dt,
       unique_visitor_cookie_id,
       visit_id,
       event_position,
       container,
       attribute,
       placement,
       CAST(NULL AS varchar) AS current_ep_id,
       result              AS click_result
FROM vb_tv_content_clicks;


INSERT INTO vb_tv_content_nav_all
SELECT dt,
       unique_visitor_cookie_id,
       visit_id,
       event_position,
       container,
       attribute,
       placement,
       current_ep_id,
       next_ep_id AS click_result
FROM vb_tv_autoplay_clicks ;

INSERT INTO vb_tv_content_nav_all
SELECT dt,
       unique_visitor_cookie_id,
       visit_id,
       event_position,
       CAST('deeplink' AS varchar) AS container,
       CAST('deeplink' AS varchar) AS attribute,
       CAST('deeplink' AS varchar) AS placement,
       CAST(NULL AS varchar)       AS current_ep_id,
       click_result
FROM vb_tv_deeplinks;

-- Check example results
SELECT * FROM vb_tv_content_nav_all ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position LIMIT 200;
--visit_id = 13900801 on dt = 20200115

------ Add in Master brand -----
-- For channels pages this has to be got from the placement field as the content ID is not being sent.
-- For category pages (apart from children) this is not possible.
-- For search this is not possible
CREATE TABLE vb_tv_content_nav_all_temp
AS SELECT * FROM vb_tv_content_nav_all;

DROP TABLE IF EXISTS vb_tv_content_nav_all;
CREATE TABLE vb_tv_content_nav_all AS
SELECT a.*,
       b.master_brand_id
FROM vb_tv_content_nav_all_temp a
         LEFT JOIN vb_vmb_temp b ON CASE
                                        WHEN a.current_ep_id ISNULL THEN a.click_result --this joins the master brand of the content click (not nav click)
                                        WHEN a.current_ep_id IS NOT NULL THEN a.current_ep_id END -- this joins the master brand for the nav clicks
                                        = b.episode_id
ORDER BY a.dt, a.unique_visitor_cookie_id, a.visit_id, a.event_position;

-- Get master brand for children's category page names
UPDATE vb_tv_content_nav_all
SET master_brand_id = SUBSTRING(placement, 23, len(placement) - 27)
WHERE placement ILIKE '%categories%'
  AND (placement ILIKE '%cbeebies%' OR placement ILIKE '%cbbc%');

-- For channels pages get master brand
UPDATE vb_tv_content_nav_all
SET master_brand_id = SUBSTRING(placement, CHARINDEX('channels.', placement) + 9,
                                len(placement) - CHARINDEX('channels.', placement) - 13)
WHERE placement ILIKE '%channel%';

-- Create temp version of the table so more things can be added in
DROP TABLE IF EXISTS vb_tv_content_nav_all_temp;
CREATE TABLE vb_tv_content_nav_all_temp
AS SELECT * FROM vb_tv_content_nav_all;

-- Add in row count
DROP TABLE vb_tv_content_nav_all;
CREATE TABLE vb_tv_content_nav_all AS
    SELECT *, row_number() over (PARTITION BY dt,unique_visitor_cookie_id,visit_id ORDER BY event_position) AS row_count
FROM vb_tv_content_nav_all_temp;

DROP TABLE vb_tv_content_nav_all_temp;

-- Simplify names of placements to make it easier to group origins
UPDATE vb_tv_content_nav_all
SET placement = (
    CASE
        WHEN placement ILIKE '%.channels.%' THEN 'channel_page'
        WHEN placement ILIKE '%categories%' AND (placement ILIKE '%cbeebies%' OR placement ILIKE '%cbbc%')
            THEN 'categories_page_kids'
        WHEN placement ILIKE '%categories%' AND placement NOT ILIKE '%cbeebies%' AND placement NOT ILIKE '%cbbc%'
            THEN 'categories_page_not_kids'
        WHEN placement ILIKE 'iplayer.tv.page' THEN 'homepage'
        WHEN placement ILIKE '%tleo%' THEN 'tleo_page'
        WHEN placement ILIKE '%episode%' THEN 'episode_page'
        WHEN placement ILIKE '%.search.%' THEN 'search_page'
        WHEN placement ILIKE 'deeplink' THEN 'deeplink'
        ELSE 'other_page' END);

-- Rename any master brands with nations in the name e.g bbc_one_england
UPDATE vb_tv_content_nav_all
SET master_brand_id = (
    CASE WHEN master_brand_id ILIKE 'bbc_one%' THEN 'bbc_one'
    WHEN master_brand_id ILIKE 'bbc_two%' THEN 'bbc_two'
    ELSE master_brand_id END
    );


SELECT * FROM vb_tv_content_nav_all WHERE placement = 'deeplink' LIMIT 10;
SELECT * FROM vb_tv_content_nav_all ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position LIMIT 200;

-- Select only things that come directly before a tv nav click
DROP TABLE IF EXISTS vb_tv_nav_click_and_preceding_content_click;
CREATE TABLE vb_tv_nav_click_and_preceding_content_click AS
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       a.container       AS content_click_container,
       a.placement       As content_click_placement,
       a.event_position  AS content_click_event_position,
       b.event_position  AS nav_click_event_position,
       a.attribute       AS content_click_attribute,
       b.attribute       AS nav_click_attribute,
       a.click_result    AS content_click_result,
       b.current_ep_id   AS nav_click_current_ep,
       a.master_brand_id AS content_click_master_brand,
       b.master_brand_id AS nav_click_conent_master_brand,
       a.row_count       AS content_click_row_count,
       b.row_count       AS nav_click_row_count,
       CASE
           WHEN a.click_result != 'unknown' AND a.click_result = b.current_ep_id THEN 'ep_id_check'
           WHEN a.click_result = 'unknown' AND a.master_brand_id IS NOT NULL AND a.master_brand_id = b.master_brand_id
               THEN 'master_brand_check'
           ELSE 'only_position_check'
           END           AS check_type -- name what type of check the content click to nav click had
FROM vb_tv_content_nav_all a
         INNER JOIN vb_tv_content_nav_all b
                    ON a.dt = b.dt AND a.unique_visitor_cookie_id = b.unique_visitor_cookie_id AND
                       a.visit_id = b.visit_id
WHERE (b.attribute LIKE '%page-section-related~select%' -- select all the nav events
    OR b.attribute LIKE '%page-section-rec~select%')
  AND a.row_count = (b.row_count - 1) --select the row above the nave event
  AND CASE
          WHEN a.click_result != 'unknown' THEN a.click_result = b.current_ep_id -- check the ep IDs match if possible
          WHEN a.click_result = 'unknown' AND a.master_brand_id IS NOT NULL
              THEN a.master_brand_id = b.master_brand_id -- check the master brands match if can't check IDs
          ELSE a.row_count = (b.row_count - 1) -- if you can't check IDs or master brands, just bring in row above anyway (it's labelled as not checked well)
    END
ORDER BY a.dt, a.unique_visitor_cookie_id, a.visit_id, a.event_position
;

SELECT dt,
       unique_visitor_cookie_id,
       visit_id,
       nav_click_event_position,
       check_type,
       content_click_placement,
       content_click_container,
       content_click_attribute,
       nav_click_attribute
FROM vb_tv_nav_click_and_preceding_content_click
ORDER BY dt, unique_visitor_cookie_id, visit_id, content_click_event_position;

SELECT COUNT(*) FROM vb_tv_nav_click_and_preceding_content_click; -- 332,037 for 2020-01-15
SELECT COUNT(*) FROM vb_tv_nav_select; --381,227 for 2020-01-15

-- What % had what level of checks?
SELECT content_click_placement, check_type, COUNT(*) FROM vb_tv_nav_click_and_preceding_content_click GROUP BY content_click_placement, check_type;


-- What are the records not in the final table but in the select?
/*SELECT p.dt,
       p.unique_visitor_cookie_id,
       p.visit_id,
       p.container,
       p.placement,
       p.attribute,
       p.result,
       p.event_position,
       p.event_start_datetime
FROM s3_audience.publisher p
         JOIN (
    SELECT a.*
    FROM vb_tv_nav_select a
             LEFT JOIN vb_tv_nav_click_and_preceding_content_click b
                       ON a.dt = b.dt AND a.unique_visitor_cookie_id = b.unique_visitor_cookie_id AND
                          a.visit_id = b.visit_id AND a.event_position = b.nav_click_event_position
    WHERE b.dt ISNULL
      AND b.unique_visitor_cookie_id ISNULL
      AND b.visit_id ISNULL
      AND b.nav_click_event_position ISNULL
    LIMIT 5) q ON p.dt = q.dt AND p.unique_visitor_cookie_id = q.unique_visitor_cookie_id AND p.visit_id = q.visit_id
WHERE p.destination = 'PS_IPLAYER'
ORDER BY p.dt, p.unique_visitor_cookie_id, p.visit_id, p.event_position
;
*/
--switching-page~current-selected



/*SELECT CASE
           WHEN placement ILIKE '%channel%' THEN 'channel_page'
           WHEN placement ILIKE '%categories%' AND (placement ILIKE '%cbeebies%' OR placement ILIKE '%cbbc%')
               THEN 'categories_page_kids'
           WHEN placement ILIKE '%categories%' AND placement NOT ILIKE '%cbeebies%' AND placement NOT ILIKE '%cbbc%'
               THEN 'categories_page_not_kids'
           WHEN placement ILIKE 'iplayer.tv.page' THEN 'homepage'
           WHEN placement ILIKE '%tleo%' THEN 'tleo'
           WHEN placement ILIKE 'globalnav.view.page' OR placement ILIKE 'iplayer.tv.group.page' OR
                placement ILIKE 'iplayer.tv.watching.page' OR placement ILIKE 'iplayer.tv.highlights.page' THEN 'other'
           ELSE attribute END as content_click_origin,
       count(click_result)
FROM vb_tv_content_nav_all_cat_channel
GROUP BY 1;
*/


------------      What % of journey's clicking onto content come from where? ----------

SELECT * FROM s3_audience.publisher WHERE destination = 'PS_IPLAYER' and dt >20200115 AND metadata ILIKE '%bigscreen%' LIMIT 10;


DROP TABLE vb_tv_all_content_clicks;
CREATE TABLE vb_tv_all_content_clicks AS
SELECT DISTINCT dt,
                unique_visitor_cookie_id,
                visit_id,
                event_position,
                container,
                CASE
                    WHEN placement ILIKE '%.channels.%' THEN 'channel_page'
                    WHEN placement ILIKE '%categories%' AND (placement ILIKE '%cbeebies%' OR placement ILIKE '%cbbc%')
                        THEN 'categories_page_kids'
                    WHEN placement ILIKE '%categories%' AND placement NOT ILIKE '%cbeebies%' AND
                         placement NOT ILIKE '%cbbc%'
                        THEN 'categories_page_not_kids'
                    WHEN placement ILIKE 'iplayer.tv.page' THEN 'homepage'
                    WHEN placement ILIKE '%tleo%' THEN 'tleo_page'
                    WHEN placement ILIKE '%episode%' THEN 'episode_page'
                    WHEN placement ILIKE '%.search.%' THEN 'search_page'
                    ELSE 'other_page' END AS placement,
                attribute
FROM s3_audience.publisher
WHERE (attribute LIKE '%page-section-related~select%' OR
       attribute LIKE '%page-section-rec~select%' OR
       attribute LIKE 'content-item%' OR
       attribute LIKE 'start-watching%' OR
       attribute = 'resume' OR
       attribute = 'next-episode' OR
       attribute = 'search-result-episode~click' OR
       attribute LIKE '%squeeze-auto-play%' OR
       attribute LIKE '%squeeze-play%' OR
       attribute LIKE '%end-play%' OR
       attribute LIKE '%end-auto-play%')
  AND metadata LIKE '%iplayer::bigscreen-html%'
  AND destination = 'PS_IPLAYER'
  AND dt >= 20200115
  AND dt <= 20200129
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position;

UPDATE vb_tv_all_content_clicks
SET container = (CASE WHEN container ILIKE 'module-if-you-liked%' THEN 'module-if-you-liked'
    ELSE container END);

ALTER TABLE vb_tv_all_content_clicks
ADD simple_container_name varchar;

UPDATE vb_tv_all_content_clicks
SET simple_container_name = (
    CASE WHEN placement = 'tleo_page' AND container ILIKE '%contextual-cta%' THEN 'featured_episode'
    WHEN placement = 'tleo_page' AND container ILIKE 'onward-journey-autoplay-next-episode' THEN 'onward-journey-autoplay-next-episode'
    WHEN placement = 'tleo_page' AND container ILIKE 'live-now' THEN 'live-now'
    WHEN placement = 'tleo_page' AND container ILIKE 'page' THEN 'page'
    ELSE (CASE WHEN placement = 'tleo_page' THEN 'series_selected' ELSE 'placement' END) END
    );

SELECT placement,container, attribute, count(*) AS num_content_clicks FROM vb_tv_all_content_clicks GROUP BY placement,container, attribute;
SELECT placement,simple_container_name, attribute, count(*) AS num_content_clicks FROM vb_tv_all_content_clicks GROUP BY placement,simple_container_name, attribute;

SELECT DISTINCT placement,container FROM vb_tv_all_content_clicks;