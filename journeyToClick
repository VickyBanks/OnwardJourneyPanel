----------- For the user clicking the menu, how did they get to viewing that content? -----
/* table vb_tv_nav_new_content_flag has all their clicks/ impressions and flag to identify new content starting
   use featured home script to identify how they got to that content.
   -> keep in what rail it was from if one home
   -> need to also include things from categories pages and channels


   1. Select all visits
   2. Select the click to the menu
   3. Join to a content item click that came before - make sure same brand/series/episode ID
   4. Prevent duplication by joining only with click that came directly before.
   5. Count number of clicks where content came from each prior location
   6. Join into where the click took them.*/
DROP TABLE IF EXISTS vb_vmb_temp;
CREATE TABLE vb_vmb_temp AS
SELECT DISTINCT master_brand_name,
                master_brand_id,
                brand_title,
                brand_id,
                series_title,
                series_id,
                episode_id,
                episode_title,
                pips_genre_level_1_names
FROM prez.scv_vmb;


-- Select visits and UV on TV where the onward nav was clicked
DROP TABLE IF EXISTS vb_tv_nav_select;
CREATE TABLE vb_tv_nav_select AS
SELECT DISTINCT p.dt,
                p.unique_visitor_cookie_id,
                p.visit_id,
                p.placement,
                p.event_position,
                p.event_start_datetime,
                p.attribute,
                vmb.brand_id        as current_brand_id,
                vmb.series_id       AS current_series_id,
                CASE
                    WHEN left(right(p.placement, 13), 8) SIMILAR TO '%[0-9]%'
                        THEN left(right(p.placement, 13), 8) -- if this contains a number then its an ep id, if not make blank
                    ELSE 'none' END AS current_ep_id,
                p.result            AS next_ep_id
FROM s3_audience.publisher p
         LEFT JOIN vb_vmb_temp vmb ON left(right(p.placement, 13), 8) = vmb.episode_id --current_ep_id (i.e the content they were on when the click happened) = episode ID in the VMB
WHERE (p.attribute LIKE '%page-section-related~select%' OR p.attribute LIKE '%page-section-rec~select%')
  AND p.metadata LIKE '%iplayer::bigscreen-html%'
  AND p.destination = 'PS_IPLAYER'
  AND p.dt = 20200115
  --AND p.dt <= 20191114
ORDER BY unique_visitor_cookie_id, visit_id, event_position;



-- Select all the rows with a content-item click (for those visits where the content nav was clicked)
-- this is content item clicks, start/resume/next ep clicks
-- clicks from search either go direct to an episode or a TLEO page.
DROP TABLE IF EXISTS vb_tv_content_clicks;
CREATE TABLE vb_tv_content_clicks AS
SELECT DISTINCT p.dt,
                p.unique_visitor_cookie_id,
                p.visit_id,
                p.event_position,
                p.container,
                p.attribute,
                p.placement,
                p.result
FROM s3_audience.publisher p
         JOIN vb_tv_nav_select vb
              ON p.dt = vb.dt AND p.unique_visitor_cookie_id = vb.unique_visitor_cookie_id AND
                 vb.visit_id = p.visit_id
WHERE (p.attribute LIKE 'content-item%' OR p.attribute = 'start-watching%' OR p.attribute = 'resume' OR
       p.attribute = 'next-episode' OR p.attribute = 'search-result-episode~click')
  AND p.publisher_clicks = 1
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position;

-- Autoplay clicks but only for those who used the nav menu
DROP TABLE IF EXISTS vb_tv_autoplay_clicks;
CREATE TABLE vb_tv_autoplay_clicks AS
SELECT DISTINCT p.dt,
                p.unique_visitor_cookie_id,
                p.visit_id,
                p.event_position,
                p.container,
                p.attribute,
                p.placement,
                CASE
                    WHEN left(right(p.placement, 13), 8) SIMILAR TO '%[0-9]%'
                        THEN left(right(p.placement, 13), 8) -- if this contains a number then its an ep id, if not make blank
                    ELSE 'none' END AS current_ep_id,
                p.result            AS next_ep_id
FROM s3_audience.publisher p
         JOIN vb_tv_nav_select vb
              ON p.dt = vb.dt AND p.unique_visitor_cookie_id = vb.unique_visitor_cookie_id AND
                 vb.visit_id = p.visit_id
WHERE (p.attribute LIKE '%squeeze-auto-play%' OR p.attribute LIKE '%end-play%')
  AND p.publisher_clicks = 1
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position;

SELECT *
FROM vb_tv_autoplay_clicks
LIMIT 10;
SELECT *
FROM s3_audience.publisher
WHERE attribute ILIKE 'content-item%' AND placement ILIKE '%channels%'
   OR placement ILIKE '%categories%' AND destination = 'PS_IPLAYER'
LIMIT 10;
--SELECT attribute, MIN(event_start_datetime) FROM s3_audience.publisher WHERE attribute LIKE '%squeeze-auto-play%' OR attribute LIKE '%end-play%' GROUP BY attribute;

-- create a table with all the nav clicks and select clicks
DROP TABLE IF EXISTS vb_tv_content_nav_all;
CREATE TABLE vb_tv_content_nav_all
AS
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       a.event_position,
       a.attribute,
       a.placement,
       a.current_ep_id,
       a.next_ep_id AS click_result,
       b.brand_title,
       b.brand_id,
       b.series_title,
       b.series_id,
       b.episode_title,
       b.episode_id
FROM vb_tv_nav_select a
         LEFT JOIN vb_vmb_temp b ON a.current_ep_id = b.episode_id;

INSERT INTO vb_tv_content_nav_all
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       a.event_position,
       a.attribute,
       a.placement,
       CAST(NULL AS varchar) AS current_ep_id,
       a.result              AS click_result,
       b.brand_title,
       b.brand_id,
       b.series_title,
       b.series_id,
       b.episode_title,
       b.episode_id
FROM vb_tv_content_clicks a
         LEFT JOIN vb_vmb_temp b ON a.result = b.episode_id;

INSERT INTO vb_tv_content_nav_all
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       a.event_position,
       a.attribute,
       a.placement,
       current_ep_id,
       a.next_ep_id AS click_result,
       b.brand_title,
       b.brand_id,
       b.series_title,
       b.series_id,
       b.episode_title,
       b.episode_id
FROM vb_tv_autoplay_clicks a
         LEFT JOIN vb_vmb_temp b ON a.current_ep_id = b.episode_id;

SELECT *
FROM vb_tv_content_nav_all
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position
LIMIT 200;

SELECT *
FROM vb_tv_content_nav_all
WHERE attribute LIKE 'search-result-episode~click'
LIMIT 5;

-- Add in Master brand,
-- For channels pages this has to be got from the placement field as the content ID is not being sent.
-- For category pages (apart from children) this is not possible.
-- For search this is not possible
DROP TABLE IF EXISTS vb_tv_content_nav_all_cat_channel;
CREATE TABLE vb_tv_content_nav_all_cat_channel AS
SELECT a.*,
       b.master_brand_id
FROM vb_tv_content_nav_all a
         LEFT JOIN vb_vmb_temp b ON CASE
                                        WHEN a.current_ep_id ISNULL THEN a.click_result
                                        WHEN a.current_ep_id IS NOT NULL THEN a.current_ep_id END = b.episode_id
ORDER BY a.dt, a.unique_visitor_cookie_id, a.visit_id, a.event_position;

UPDATE vb_tv_content_nav_all_cat_channel
SET master_brand_id = SUBSTRING(placement, 23, len(placement) - 27)
WHERE placement ILIKE '%categories%'
  AND (placement ILIKE '%cbeebies%' OR placement ILIKE '%cbbc%');

UPDATE vb_tv_content_nav_all_cat_channel
SET master_brand_id = SUBSTRING(placement, CHARINDEX('channels.', placement) + 9,
                                len(placement) - CHARINDEX('channels.', placement) - 13)
WHERE placement ILIKE '%channel%';

CREATE TABLE vb_tv_content_nav_all_cat_channel_temp
AS SELECT * FROM vb_tv_content_nav_all_cat_channel;
DROP TABLE vb_tv_content_nav_all_cat_channel;

CREATE TABLE vb_tv_content_nav_all_cat_channel AS
    SELECT *, row_number() over (PARTITION BY dt,unique_visitor_cookie_id,visit_id ORDER BY event_position) AS row_count
FROM vb_tv_content_nav_all_cat_channel_temp;

DROP TABLE vb_tv_content_nav_all_cat_channel_temp;

SELECT *
FROM vb_tv_content_nav_all_cat_channel
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position
LIMIT 200;

-- Select only things that come directly before a tv nav click
CREATE TABLE vb_tv_nav_click_and_preceding_content_click AS
SELECT * FROM vb_tv_content_nav_all_cat_channel
    WHERE attribute LIKE '%page-section-related~select%' OR attribute LIKE '%page-section-rec~select%';

--INSERT INTO vb_tv_nav_click_and_preceding_content_click
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       a.event_position AS content_event_position,
       a.attribute AS content_attribute,
       a.placement As content_placement,
       a.click_result AS content_click_result,
       a.master_brand_id AS content_click_master_brand,
       a.row_count AS content_click_row_count,
       b.event_position AS nav_click_event_position,
       b.attribute AS nav_click_attribute,
       b.current_ep_id AS nav_click_current_ep,
       b.master_brand_id AS nav_click_conent_master_brand,
       b.row_count AS nav_click_row_count
FROM vb_tv_content_nav_all_cat_channel a
         INNER JOIN vb_tv_content_nav_all_cat_channel b
                    ON a.dt = b.dt AND a.unique_visitor_cookie_id = b.unique_visitor_cookie_id AND
                       a.visit_id = b.visit_id
WHERE (b.attribute LIKE '%page-section-related~select%'
    OR b.attribute LIKE '%page-section-rec~select%')
  AND a.row_count = (b.row_count - 1)
  AND a.visit_id = '4870084'
LIMIT 10;
-- when a.result is not blank, check content-click result = nav select current id
-- add label - checking = ID
-- if it is blank check if master brands are the same - add label checking = master_brand
-- if its not got a master brand - add label checking = none


 CASE WHEN LAG(attribute, 1) OVER (PARTITION BY dt,unique_visitor_cookie_id,visit_id ORDER BY event_position) IS NOT NULL
           AS previous_attribute
FROM vb_tv_nav_click_and_preceding
/*SELECT CASE
           WHEN placement ILIKE '%channel%' THEN 'channel'
           WHEN placement ILIKE '%categories%' AND (placement ILIKE '%cbeebies%' OR placement ILIKE '%cbbc%')
               THEN 'categories (children)'
           WHEN placement ILIKE '%categories%' AND placement NOT ILIKE '%cbeebies%' AND placement NOT ILIKE '%cbbc%'
               THEN 'categories (not children)'
           WHEN placement ILIKE 'iplayer.tv.page' THEN 'homepage'
           WHEN placement ILIKE '%tleo%' THEN 'tleo'
           WHEN placement ILIKE 'globalnav.view.page' OR placement ILIKE 'iplayer.tv.group.page' OR
                placement ILIKE 'iplayer.tv.watching.page' OR placement ILIKE 'iplayer.tv.highlights.page' THEN 'other'
           ELSE attribute END as content_click_origin,
       count(click_result)
FROM vb_tv_content_nav_all_cat_channel
GROUP BY 1;
*/


-- Create a table joining the click to the content and the nav click whilst on that content.
-- Make sure that the content click came before the nav click
DROP TABLE IF EXISTS vb_tv_content_to_nav_journey_temp;
CREATE TABLE vb_tv_content_to_nav_journey_temp AS
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       b.event_position                                     AS content_click_event_position,
       b.container                                          AS content_click_container,
       b.placement                                          AS content_click_placement,
       b.result                                             AS content_click_result,
       a.event_position                                     AS nav_click_event_position,
       a.attribute                                          AS nav_menu_type,
       a.current_brand_id,
       a.current_series_id,
       a.current_ep_id,
       CAST(a.event_position - b.event_position AS integer) AS content_nav_position_diff
FROM vb_tv_nav_select a
         JOIN vb_tv_content_clicks b
              ON a.dt = b.dt AND a.unique_visitor_cookie_id = b.unique_visitor_cookie_id AND a.visit_id = b.visit_id
WHERE b.event_position < a.event_position
  AND (b.result = a.current_brand_id OR b.result = a.current_series_id OR b.result = a.current_ep_id)
ORDER BY a.dt, a.unique_visitor_cookie_id, a.visit_id, b.event_position;


-- Prevent any duplication - this selects which ever valid content-item click was closest to (and before) the start event.
DROP TABLE IF EXISTS vb_tv_content_to_nav_journey;
CREATE TABLE vb_tv_content_to_nav_journey AS
SELECT *
FROM (
         SELECT *,
                row_number()
                OVER (PARTITION BY dt, unique_visitor_cookie_id, visit_id, content_click_event_position ORDER BY content_nav_position_diff) AS duplicate_identifier_1,
                row_number()
                OVER (PARTITION BY dt, unique_visitor_cookie_id, visit_id, nav_click_event_position ORDER BY content_nav_position_diff)     AS duplicate_identifier_2
         FROM vb_tv_content_to_nav_journey_temp
         ORDER BY dt, unique_visitor_cookie_id, visit_id, content_click_event_position)
WHERE duplicate_identifier_1 = 1
  AND duplicate_identifier_2 = 1;


--The above only works for homepage and TLEO where the result (contentID) is given. For categories and channels it's not sent.
-- So for those we need to select only the content-click that came most recently before
DROP TABLE IF EXISTS vb_tv_content_to_nav_journey_chan_cat;
CREATE TABLE vb_tv_content_to_nav_journey_chan_cat AS
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       b.event_position                                     AS content_click_event_position,
       b.container                                          AS content_click_container,
       b.placement                                          AS content_click_placement,
       b.result                                             AS content_click_result,
       a.event_position                                     AS nav_click_event_position,
       a.attribute                                          AS nav_menu_type,
       a.current_brand_id,
       a.current_series_id,
       a.current_ep_id,
       CAST(a.event_position - b.event_position AS integer) AS content_nav_position_diff
FROM vb_tv_nav_select a
         JOIN vb_tv_content_clicks b
              ON a.dt = b.dt AND a.unique_visitor_cookie_id = b.unique_visitor_cookie_id AND a.visit_id = b.visit_id
WHERE (b.placement ILIKE '%channels%' OR b.placement ILIKE '%categories%')
  AND b.event_position < a.event_position
ORDER BY a.dt, a.unique_visitor_cookie_id, a.visit_id, b.event_position;

SELECT *
FROM vb_tv_content_to_nav_journey_chan_cat
LIMIT 1000;
SELECT *
FROM s3_audience.publisher
WHERE dt = 20191101
  AND visit_id = '11772591'
  AND destination = 'PS_IPLAYER'
ORDER BY event_position;


----- get any nav selects that are not in the normal table (i.e wasn't matched by brand/series/ep)
DROP TABLE IF EXISTS vb_tv_content_to_nav_journey_chan_cat;
CREATE TABLE vb_tv_content_to_nav_journey_chan_cat AS
SELECT a.dt,
       a.unique_visitor_cookie_id,
       a.visit_id,
       a.event_position,
       a.attribute,
       a.placement,
       a.current_ep_id AS result
FROM vb_tv_nav_select a
         LEFT JOIN vb_tv_content_to_nav_journey b
                   ON a.dt = b.dt AND a.unique_visitor_cookie_id = b.unique_visitor_cookie_id AND
                      a.visit_id = b.visit_id AND a.event_position = nav_click_event_position
WHERE b.dt IS NULL
  AND b.unique_visitor_cookie_id ISNULL
  AND b.visit_id ISNULL
  AND b.nav_click_event_position ISNULL
;

-- then add in the content-clicks
INSERT INTO vb_tv_content_to_nav_journey_chan_cat
SELECT dt, unique_visitor_cookie_id, visit_id, event_position, attribute, placement, result
FROM vb_tv_content_clicks
WHERE placement ILIKE '%channels%'
   OR placement ILIKE '%categories%';


SELECT *
FROM vb_tv_content_to_nav_journey_chan_cat
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position
LIMIT 1000;


-- Simplify some of the labelling
UPDATE vb_tv_content_to_nav_journey
SET content_click_container = (CASE
                                   WHEN content_click_container ILIKE '%module-if-you-liked%' THEN 'module-if-you-liked'
                                   ELSE content_click_container END),
    content_click_placement = (CASE
                                   WHEN content_click_placement ILIKE '%tleo%' THEN 'TLEO'
                                   WHEN content_click_placement ILIKE 'iplayer.tv.page' THEN 'Homepage'
                                   ELSE content_click_placement END);

SELECT content_click_container, content_click_placement, COUNT(*)
FROM vb_tv_content_to_nav_journey
GROUP BY content_click_container, content_click_placement;

SELECT DISTINCT CASE
                    WHEN content_click_container ILIKE '%module-if-you-liked%' THEN 'module-if-you-liked'
                    ELSE content_click_container END AS content_click_container,
                CASE
                    WHEN content_click_placement ILIKE '%tleo%' THEN 'TLEO'
                    WHEN content_click_placement ILIKE 'iplayer.tv.page' THEN 'Homepage'
                    ELSE content_click_placement END AS content_click_placement

FROM vb_tv_content_to_nav_journey;


---------- Figure out how to get the content--id from when the result is missing
SELECT *
FROM vb_tv_content_clicks
WHERE result LIKE 'unknown'
ORDER BY dt, unique_visitor_cookie_id, visit_id, event_position
LIMIT 20;

SELECT visit_id, event_position, container, attribute, placement, result
FROM s3_audience.publisher
WHERE dt = 20191101
  AND (visit_id = '11765073' OR visit_id = '118285961' OR visit_id = '16693281' OR visit_id = '463493')
  AND destination = 'PS_IPLAYER'
  AND metadata ILIKE '%bigscreen%'
ORDER BY visit_id, event_position;
